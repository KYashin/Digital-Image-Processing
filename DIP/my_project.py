# Form implementation generated from reading ui file 'MyApp.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import re
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow, QFileDialog, QLabel, QGraphicsScene, QGraphicsView, QMessageBox
from PyQt6.QtGui import QPixmap, QPainter, QImage
from PyQt6.QtCore import Qt
import numpy as np
import cv2
import matplotlib.pyplot as plt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1110, 897)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.tabWidget.setStatusTip("")
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setStyleSheet("QTabWidget::pane { \n"
"    /* Общий фон для области вкладок */\n"
"    border: 1px solid #D1D5DB;\n"
"    background: #F9FAFB;\n"
"    border-radius: 6px;\n"
"    padding: 6px;\n"
"}\n"
"\n"
"QTabBar::tab {\n"
"    /* Общий стиль вкладок */\n"
"    background: #E5E7EB;\n"
"    color: #374151;\n"
"    border: 1px solid #D1D5DB;\n"
"    border-radius: 6px;\n"
"    padding: 8px 12px;\n"
"    margin: 2px;\n"
"    min-width: 60px;\n"
"    text-align: center;\n"
"    transition: all 0.3s ease;\n"
"}\n"
"\n"
"QTabBar::tab:selected {\n"
"    /* Стиль активной вкладки */\n"
"    background: #2563EB;\n"
"    color: #FFFFFF;\n"
"    border: 1px solid #1D4ED8;\n"
"    font-weight: bold;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"}\n"
"\n"
"QTabBar::tab:hover {\n"
"    /* Эффект при наведении */\n"
"    background: #3B82F6;\n"
"    color: #FFFFFF;\n"
"    border: 1px solid #2563EB;\n"
"}\n"
"\n"
"QTabBar::tab:!selected {\n"
"    /* Уменьшение выделения для неактивных вкладок */\n"
"    background: #E5E7EB;\n"
"    color: #374151;\n"
"}\n"
"\n"
"QTabBar::tab:disabled {\n"
"    /* Стиль для отключенных вкладок */\n"
"    background: #F3F4F6;\n"
"    color: #9CA3AF;\n"
"    border: 1px solid #D1D5DB;\n"
"}")
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setObjectName("tabWidget")
        self.gf = QtWidgets.QWidget()
        self.gf.setObjectName("gf")
        self.groupBox_negative_equalization = QtWidgets.QGroupBox(parent=self.gf)
        self.groupBox_negative_equalization.setGeometry(QtCore.QRect(0, 0, 340, 190))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_negative_equalization.sizePolicy().hasHeightForWidth())
        self.groupBox_negative_equalization.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_negative_equalization.setFont(font)
        self.groupBox_negative_equalization.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_negative_equalization.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_negative_equalization.setObjectName("groupBox_negative_equalization")

        self.button_negative = QtWidgets.QPushButton(parent=self.groupBox_negative_equalization)
        self.button_negative.setGeometry(QtCore.QRect(20, 40, 300, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.button_negative.setFont(font)
        self.button_negative.setObjectName("button_negative")

        self.button_equalization = QtWidgets.QPushButton(parent=self.groupBox_negative_equalization)
        self.button_equalization.setGeometry(QtCore.QRect(20, 120, 300, 60))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_equalization.sizePolicy().hasHeightForWidth())
        self.button_equalization.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.button_equalization.setFont(font)
        self.button_equalization.setObjectName("button_equalization")

        self.groupBox_binarization = QtWidgets.QGroupBox(parent=self.gf)
        self.groupBox_binarization.setGeometry(QtCore.QRect(700, 0, 340, 190))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_binarization.setFont(font)
        self.groupBox_binarization.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_binarization.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_binarization.setObjectName("groupBox_binarization")

        self.horizontalSlider_binarization = QtWidgets.QSlider(parent=self.groupBox_binarization)
        self.horizontalSlider_binarization.setGeometry(QtCore.QRect(10, 60, 320, 22))
        self.horizontalSlider_binarization.setMinimum(0)
        self.horizontalSlider_binarization.setMaximum(255)
        self.horizontalSlider_binarization.setProperty("value", 0)
        self.horizontalSlider_binarization.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_binarization.setObjectName("horizontalSlider_binarization")

        self.label_binarization = QtWidgets.QLabel(parent=self.groupBox_binarization)
        self.label_binarization.setGeometry(QtCore.QRect(10, 30, 221, 20))
        self.label_binarization.setObjectName("label_binarization")

        self.lineEdit_binarization = QtWidgets.QLineEdit(parent=self.groupBox_binarization)
        self.lineEdit_binarization.setGeometry(QtCore.QRect(140, 90, 113, 22))
        self.lineEdit_binarization.setObjectName("lineEdit_binarization")
        self.lineEdit_binarization.setText("0")

        self.label_2_binarization = QtWidgets.QLabel(parent=self.groupBox_binarization)
        self.label_2_binarization.setGeometry(QtCore.QRect(10, 90, 130, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_binarization.sizePolicy().hasHeightForWidth())
        self.label_2_binarization.setSizePolicy(sizePolicy)
        self.label_2_binarization.setObjectName("label_2_binarization")

        self.pushButton_binarization = QtWidgets.QPushButton(parent=self.groupBox_binarization)
        self.pushButton_binarization.setGeometry(QtCore.QRect(70, 120, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_binarization.setFont(font)
        self.pushButton_binarization.setStyleSheet("")
        self.pushButton_binarization.setAutoExclusive(False)
        self.pushButton_binarization.setObjectName("pushButton_binarization")

        self.groupBox_brightness = QtWidgets.QGroupBox(parent=self.gf)
        self.groupBox_brightness.setGeometry(QtCore.QRect(350, 0, 340, 190))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_brightness.setFont(font)
        self.groupBox_brightness.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_brightness.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_brightness.setObjectName("groupBox_brightness")

        self.pushButton_brightness = QtWidgets.QPushButton(parent=self.groupBox_brightness)
        self.pushButton_brightness.setGeometry(QtCore.QRect(70, 120, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_brightness.setFont(font)
        self.pushButton_brightness.setObjectName("pushButton_brightness")

        self.horizontalSlider_brightness = QtWidgets.QSlider(parent=self.groupBox_brightness)
        self.horizontalSlider_brightness.setGeometry(QtCore.QRect(10, 60, 320, 22))
        self.horizontalSlider_brightness.setMinimum(-150)
        self.horizontalSlider_brightness.setMaximum(150)
        self.horizontalSlider_brightness.setSingleStep(1)
        self.horizontalSlider_brightness.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_brightness.setObjectName("horizontalSlider_brightness")

        self.label_brightness = QtWidgets.QLabel(parent=self.groupBox_brightness)
        self.label_brightness.setGeometry(QtCore.QRect(10, 30, 261, 20))
        self.label_brightness.setObjectName("label_brightness")

        self.lineEdit_brightness = QtWidgets.QLineEdit(parent=self.groupBox_brightness)
        self.lineEdit_brightness.setGeometry(QtCore.QRect(170, 90, 113, 22))
        self.lineEdit_brightness.setObjectName("lineEdit_brightness")
        self.lineEdit_brightness.setText("0")

        self.label_2_brightness = QtWidgets.QLabel(parent=self.groupBox_brightness)
        self.label_2_brightness.setGeometry(QtCore.QRect(10, 90, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_brightness.sizePolicy().hasHeightForWidth())
        self.label_2_brightness.setSizePolicy(sizePolicy)
        self.label_2_brightness.setObjectName("label_2_brightness")

        self.groupBox_contrast = QtWidgets.QGroupBox(parent=self.gf)
        self.groupBox_contrast.setGeometry(QtCore.QRect(0, 200, 340, 190))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_contrast.setFont(font)
        self.groupBox_contrast.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_contrast.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_contrast.setObjectName("groupBox_contrast")

        self.pushButton_contrast = QtWidgets.QPushButton(parent=self.groupBox_contrast)
        self.pushButton_contrast.setGeometry(QtCore.QRect(70, 120, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_contrast.setFont(font)
        self.pushButton_contrast.setObjectName("pushButton_contrast")

        self.horizontalSlider_contrast = QtWidgets.QSlider(parent=self.groupBox_contrast)
        self.horizontalSlider_contrast.setGeometry(QtCore.QRect(10, 60, 320, 22))
        self.horizontalSlider_contrast.setMinimum(1)
        self.horizontalSlider_contrast.setMaximum(50)
        self.horizontalSlider_contrast.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_contrast.setObjectName("horizontalSlider_contrast")

        self.label_contrast = QtWidgets.QLabel(parent=self.groupBox_contrast)
        self.label_contrast.setGeometry(QtCore.QRect(10, 30, 257, 20))
        self.label_contrast.setObjectName("label_contrast")

        self.label_2_contrast = QtWidgets.QLabel(parent=self.groupBox_contrast)
        self.label_2_contrast.setGeometry(QtCore.QRect(10, 90, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_contrast.sizePolicy().hasHeightForWidth())
        self.label_2_contrast.setSizePolicy(sizePolicy)
        self.label_2_contrast.setObjectName("label_2_contrast")

        self.lineEdit_contrast = QtWidgets.QLineEdit(parent=self.groupBox_contrast)
        self.lineEdit_contrast.setGeometry(QtCore.QRect(170, 90, 113, 22))
        self.lineEdit_contrast.setObjectName("lineEdit_contrast")
        self.lineEdit_contrast.setText("0.1")

        self.groupBox_gamma = QtWidgets.QGroupBox(parent=self.gf)
        self.groupBox_gamma.setGeometry(QtCore.QRect(350, 200, 340, 190))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_gamma.setFont(font)
        self.groupBox_gamma.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_gamma.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_gamma.setObjectName("groupBox_gamma")

        self.pushButton_gamma = QtWidgets.QPushButton(parent=self.groupBox_gamma)
        self.pushButton_gamma.setGeometry(QtCore.QRect(70, 120, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_gamma.setFont(font)
        self.pushButton_gamma.setObjectName("pushButton_gamma")

        self.horizontalSlider_gamma = QtWidgets.QSlider(parent=self.groupBox_gamma)
        self.horizontalSlider_gamma.setGeometry(QtCore.QRect(10, 60, 320, 22))
        self.horizontalSlider_gamma.setMinimum(1)
        self.horizontalSlider_gamma.setMaximum(50)
        self.horizontalSlider_gamma.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_gamma.setObjectName("horizontalSlider_gamma")

        self.label_gamma = QtWidgets.QLabel(parent=self.groupBox_gamma)
        self.label_gamma.setGeometry(QtCore.QRect(10, 30, 311, 20))
        self.label_gamma.setObjectName("label_gamma")

        self.label_2_gamma = QtWidgets.QLabel(parent=self.groupBox_gamma)
        self.label_2_gamma.setGeometry(QtCore.QRect(10, 90, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_gamma.sizePolicy().hasHeightForWidth())
        self.label_2_gamma.setSizePolicy(sizePolicy)
        self.label_2_gamma.setObjectName("label_2_gamma")

        self.lineEdit_gamma = QtWidgets.QLineEdit(parent=self.groupBox_gamma)
        self.lineEdit_gamma.setGeometry(QtCore.QRect(170, 90, 113, 22))
        self.lineEdit_gamma.setObjectName("lineEdit_gamma")
        self.lineEdit_gamma.setText("0.1")

        self.groupBox_full = QtWidgets.QGroupBox(parent=self.gf)
        self.groupBox_full.setGeometry(QtCore.QRect(700, 200, 340, 190))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_full.setFont(font)
        self.groupBox_full.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_full.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_full.setObjectName("groupBox_full")

        self.pushButton_full = QtWidgets.QPushButton(parent=self.groupBox_full)
        self.pushButton_full.setGeometry(QtCore.QRect(70, 70, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_full.setFont(font)
        self.pushButton_full.setObjectName("pushButton_full")

        # Инициализация QGraphicsView
        self.graphicsView = QtWidgets.QGraphicsView(parent=self.gf)
        self.graphicsView.setGeometry(QtCore.QRect(345, 430, 350, 350))
        self.graphicsView.setObjectName("graphicsView")

        # Инициализация QGraphicsScene
        self.scene = QGraphicsScene()

        # Устанавливаем сцену для QGraphicsView
        self.graphicsView.setScene(self.scene)

        self.label = QtWidgets.QLabel(parent=self.gf)
        self.label.setGeometry(QtCore.QRect(345, 390, 350, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.tabWidget.addTab(self.gf, "")
        self.gif = QtWidgets.QWidget()
        self.gif.setObjectName("gif")
        self.pushButton_matrix = QtWidgets.QPushButton(parent=self.gif)
        self.pushButton_matrix.setGeometry(QtCore.QRect(120, 500, 200, 60))
        self.pushButton_matrix.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.pushButton_matrix.setObjectName("pushButton_matrix")
        self.pushButton_gif = QtWidgets.QPushButton(parent=self.gif)
        self.pushButton_gif.setGeometry(QtCore.QRect(120, 370, 200, 60))
        self.pushButton_gif.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.pushButton_gif.setObjectName("pushButton_gif")
        self.lineEdit_epsilon = QtWidgets.QLineEdit(parent=self.gif)
        self.lineEdit_epsilon.setGeometry(QtCore.QRect(170, 220, 113, 22))
        self.lineEdit_epsilon.setObjectName("lineEdit_epsilon")
        self.lineEdit_r = QtWidgets.QLineEdit(parent=self.gif)
        self.lineEdit_r.setGeometry(QtCore.QRect(170, 170, 111, 22))
        self.lineEdit_r.setObjectName("lineEdit_r")
        self.label_2 = QtWidgets.QLabel(parent=self.gif)
        self.label_2.setGeometry(QtCore.QRect(150, 170, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.gif)
        self.label_3.setGeometry(QtCore.QRect(110, 220, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.gif)
        self.label_4.setGeometry(QtCore.QRect(110, 470, 231, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.gif)
        self.label_5.setGeometry(QtCore.QRect(80, 350, 281, 16))
        self.label_5.setObjectName("label_5")
        self.checkBox = QtWidgets.QCheckBox(parent=self.gif)
        self.checkBox.setGeometry(QtCore.QRect(200, 270, 51, 20))
        self.checkBox.setObjectName("checkBox")
        self.lineEdit_noise = QtWidgets.QLineEdit(parent=self.gif)
        self.lineEdit_noise.setGeometry(QtCore.QRect(170, 300, 113, 22))
        self.lineEdit_noise.setObjectName("lineEdit_noise")
        self.label_6 = QtWidgets.QLabel(parent=self.gif)
        self.label_6.setGeometry(QtCore.QRect(90, 300, 81, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")

        self.graphicsView_2 = QtWidgets.QGraphicsView(parent=self.gif)
        self.graphicsView_2.setGeometry(QtCore.QRect(480, 130, 580, 580))
        self.graphicsView_2.setObjectName("graphicsView_2")

        # Устанавливаем сцену для QGraphicsView
        self.graphicsView_2.setScene(self.scene)

        self.label_7 = QtWidgets.QLabel(parent=self.gif)
        self.label_7.setGeometry(QtCore.QRect(640, 80, 271, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.tabWidget.addTab(self.gif, "")
        self.cam = QtWidgets.QWidget()
        self.cam.setObjectName("cam")
        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.cam)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(190, 90, 691, 581))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_video = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_video.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_video.setObjectName("gridLayout_video")

        self.groupBox_brightness_video = QtWidgets.QGroupBox(parent=self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_brightness_video.setFont(font)
        self.groupBox_brightness_video.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_brightness_video.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_brightness_video.setObjectName("groupBox_brightness_video")

        self.pushButton_brightness_video = QtWidgets.QPushButton(parent=self.groupBox_brightness_video)
        self.pushButton_brightness_video.setGeometry(QtCore.QRect(70, 180, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_brightness_video.setFont(font)
        self.pushButton_brightness_video.setObjectName("pushButton_brightness_video")

        self.horizontalSlider_brightness_video = QtWidgets.QSlider(parent=self.groupBox_brightness_video)
        self.horizontalSlider_brightness_video.setGeometry(QtCore.QRect(10, 80, 320, 22))
        self.horizontalSlider_brightness_video.setMinimum(-150)
        self.horizontalSlider_brightness_video.setMaximum(150)
        self.horizontalSlider_brightness_video.setSingleStep(3)
        self.horizontalSlider_brightness_video.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_brightness_video.setObjectName("horizontalSlider_brightness_video")

        self.label_brightness_video = QtWidgets.QLabel(parent=self.groupBox_brightness_video)
        self.label_brightness_video.setGeometry(QtCore.QRect(10, 50, 261, 20))
        self.label_brightness_video.setObjectName("label_brightness_video")

        self.lineEdit_brightness_video = QtWidgets.QLineEdit(parent=self.groupBox_brightness_video)
        self.lineEdit_brightness_video.setGeometry(QtCore.QRect(170, 140, 113, 22))
        self.lineEdit_brightness_video.setObjectName("lineEdit_brightness_video")
        self.lineEdit_brightness_video.setText("0")

        self.label_2_brightness_video = QtWidgets.QLabel(parent=self.groupBox_brightness_video)
        self.label_2_brightness_video.setGeometry(QtCore.QRect(10, 140, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_brightness_video.sizePolicy().hasHeightForWidth())
        self.label_2_brightness_video.setSizePolicy(sizePolicy)
        self.label_2_brightness_video.setObjectName("label_2_brightness_video")

        self.gridLayout_video.addWidget(self.groupBox_brightness_video, 1, 0, 1, 1)

        self.groupBox_contrast_video = QtWidgets.QGroupBox(parent=self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_contrast_video.setFont(font)
        self.groupBox_contrast_video.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_contrast_video.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_contrast_video.setObjectName("groupBox_contrast_video")

        self.pushButton_contrast_video = QtWidgets.QPushButton(parent=self.groupBox_contrast_video)
        self.pushButton_contrast_video.setGeometry(QtCore.QRect(70, 180, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_contrast_video.setFont(font)
        self.pushButton_contrast_video.setObjectName("pushButton_contrast_video")

        self.horizontalSlider_contrast_video = QtWidgets.QSlider(parent=self.groupBox_contrast_video)
        self.horizontalSlider_contrast_video.setGeometry(QtCore.QRect(10, 80, 320, 22))
        self.horizontalSlider_contrast_video.setMaximum(200)
        self.horizontalSlider_contrast_video.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_contrast_video.setObjectName("horizontalSlider_contrast_video")

        self.label_contrast_video = QtWidgets.QLabel(parent=self.groupBox_contrast_video)
        self.label_contrast_video.setGeometry(QtCore.QRect(10, 50, 257, 20))
        self.label_contrast_video.setObjectName("label_contrast_video")

        self.label_2_contrast_video = QtWidgets.QLabel(parent=self.groupBox_contrast_video)
        self.label_2_contrast_video.setGeometry(QtCore.QRect(10, 140, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_contrast_video.sizePolicy().hasHeightForWidth())
        self.label_2_contrast_video.setSizePolicy(sizePolicy)
        self.label_2_contrast_video.setObjectName("label_2_contrast_video")

        self.lineEdit_contrast_video = QtWidgets.QLineEdit(parent=self.groupBox_contrast_video)
        self.lineEdit_contrast_video.setGeometry(QtCore.QRect(170, 140, 113, 22))
        self.lineEdit_contrast_video.setObjectName("lineEdit_contrast_video")
        self.lineEdit_contrast_video.setText("0.1")

        self.gridLayout_video.addWidget(self.groupBox_contrast_video, 1, 1, 1, 1)

        self.groupBox_negative_video = QtWidgets.QGroupBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_negative_video.sizePolicy().hasHeightForWidth())
        self.groupBox_negative_video.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_negative_video.setFont(font)
        self.groupBox_negative_video.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_negative_video.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_negative_video.setObjectName("groupBox_negative_video")
        self.button_negative_video = QtWidgets.QPushButton(parent=self.groupBox_negative_video)
        self.button_negative_video.setGeometry(QtCore.QRect(20, 110, 300, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.button_negative_video.setFont(font)
        self.button_negative_video.setObjectName("button_negative_video")
        self.gridLayout_video.addWidget(self.groupBox_negative_video, 2, 1, 1, 1)

        self.groupBox_gamma_video = QtWidgets.QGroupBox(parent=self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox_gamma_video.setFont(font)
        self.groupBox_gamma_video.setStyleSheet("QPushButton {\n"
"    background-color: #F0F0F0;         /* Светло-серый фон */\n"
"    color: #333333;                   /* Тёмно-серый текст */\n"
"    border: 1px solid #CCCCCC;        /* Светло-серая обводка */\n"
"    border-radius: 6px;               /* Лёгкое закругление углов */\n"
"    padding: 8px 14px;                /* Внутренние отступы */\n"
"    font-size: 13px;                  /* Размер шрифта */\n"
"    font-family: \"Segoe UI\", sans-serif; /* Современный шрифт */\n"
"    font-weight: 500;                 /* Умеренная толщина текста */\n"
"    transition: all 0.3s ease;        /* Плавный переход */\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #E6E6E6;        /* Немного темнее при наведении */\n"
"    border-color: #B3B3B3;            /* Подчеркнутая обводка */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #D9D9D9;        /* Ещё темнее при нажатии */\n"
"    color: #000000;                   /* Чёрный текст для акцента */\n"
"    border-color: #999999;            /* Более тёмная обводка */\n"
"    transform: scale(0.98);           /* Лёгкое сжатие при нажатии */\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    background-color: #F8F8F8;        /* Почти белый фон */\n"
"    color: #A6A6A6;                   /* Блеклый текст */\n"
"    border: 1px solid #E0E0E0;        /* Почти незаметная обводка */\n"
"}")
        self.groupBox_gamma_video.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_gamma_video.setObjectName("groupBox_gamma_video")

        self.pushButton_gamma_video = QtWidgets.QPushButton(parent=self.groupBox_gamma_video)
        self.pushButton_gamma_video.setGeometry(QtCore.QRect(70, 180, 200, 60))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(False)
        self.pushButton_gamma_video.setFont(font)
        self.pushButton_gamma_video.setObjectName("pushButton_gamma_video")

        self.horizontalSlider_gamma_video = QtWidgets.QSlider(parent=self.groupBox_gamma_video)
        self.horizontalSlider_gamma_video.setGeometry(QtCore.QRect(10, 80, 320, 22))
        self.horizontalSlider_gamma_video.setMinimum(1)
        self.horizontalSlider_gamma_video.setMaximum(50)
        self.horizontalSlider_gamma_video.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.horizontalSlider_gamma_video.setObjectName("horizontalSlider_gamma_video")

        self.label_gamma_video = QtWidgets.QLabel(parent=self.groupBox_gamma_video)
        self.label_gamma_video.setGeometry(QtCore.QRect(10, 50, 311, 20))
        self.label_gamma_video.setObjectName("label_gamma_video")

        self.label_2_gamma_video = QtWidgets.QLabel(parent=self.groupBox_gamma_video)
        self.label_2_gamma_video.setGeometry(QtCore.QRect(10, 140, 150, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2_gamma_video.sizePolicy().hasHeightForWidth())
        self.label_2_gamma_video.setSizePolicy(sizePolicy)
        self.label_2_gamma_video.setObjectName("label_2_gamma_video")

        self.lineEdit_gamma_video = QtWidgets.QLineEdit(parent=self.groupBox_gamma_video)
        self.lineEdit_gamma_video.setGeometry(QtCore.QRect(170, 140, 113, 22))
        self.lineEdit_gamma_video.setObjectName("lineEdit_gamma_video")
        self.lineEdit_gamma_video.setText("0.1")

        self.gridLayout_video.addWidget(self.groupBox_gamma_video, 2, 0, 1, 1)
        self.tabWidget.addTab(self.cam, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1110, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menu = QtWidgets.QMenu(parent=self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(parent=self.menubar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_image = QtGui.QAction(parent=MainWindow)
        self.actionOpen_image.setShortcutContext(QtCore.Qt.ShortcutContext.WindowShortcut)
        self.actionOpen_image.setObjectName("actionOpen_image")
        self.action_Exit = QtGui.QAction(parent=MainWindow)
        self.action_Exit.setObjectName("action_Exit")
        self.actionSave_image = QtGui.QAction(parent=MainWindow)
        self.actionSave_image.setObjectName("actionSave_image")
        self.action_Reset = QtGui.QAction(parent=MainWindow)
        self.action_Reset.setObjectName("action_Reset")
        self.action_program = QtGui.QAction(parent=MainWindow)
        self.action_program.setObjectName("action_program")
        self.action_help = QtGui.QAction(parent=MainWindow)
        self.action_help.setObjectName("action_help")
        self.menuFile.addAction(self.actionOpen_image)
        self.menuFile.addAction(self.actionSave_image)
        self.menuFile.addAction(self.action_Exit)
        self.menu.addAction(self.action_Reset)
        self.menu_2.addAction(self.action_program)
        self.menu_2.addAction(self.action_help)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Digital Image Processing"))
        self.groupBox_negative_equalization.setTitle(_translate("MainWindow", "Негатив и эквализация гистограммы"))
        self.button_negative.setStatusTip(_translate("MainWindow", "Преобразовать изображение в негатив"))
        self.button_negative.setText(_translate("MainWindow", "Негатив"))
        self.button_equalization.setStatusTip(_translate("MainWindow", "Произвести эквализацию гистограммы"))
        self.button_equalization.setText(_translate("MainWindow", "Эквализация гистограммы"))
        self.groupBox_binarization.setTitle(_translate("MainWindow", "Бинаризация"))
        self.horizontalSlider_binarization.setStatusTip(_translate("MainWindow", "Ползунок для выбора порога бинаризации"))
        self.label_binarization.setText(_translate("MainWindow", "Выбор порога бинаризации от 0 до 255:"))
        self.label_2_binarization.setText(_translate("MainWindow", "Выбранный порог:"))
        self.pushButton_binarization.setStatusTip(_translate("MainWindow", "Применить бинаризацию"))
        self.pushButton_binarization.setText(_translate("MainWindow", "Применить "))
        self.groupBox_brightness.setTitle(_translate("MainWindow", "Изменение яркости"))
        self.pushButton_brightness.setStatusTip(_translate("MainWindow", "Применить изменение яркости"))
        self.pushButton_brightness.setText(_translate("MainWindow", "Применить"))
        self.horizontalSlider_brightness.setStatusTip(_translate("MainWindow", "Ползунок для выбора коэффициента яркости"))
        self.label_brightness.setText(_translate("MainWindow", "Выбор коэффициента яркости (от -150 до 150):"))
        self.label_2_brightness.setText(_translate("MainWindow", "Выбранный коэффициент:"))
        self.groupBox_contrast.setTitle(_translate("MainWindow", "Изменение контраста"))
        self.pushButton_contrast.setStatusTip(_translate("MainWindow", "Применить изменение контраста"))
        self.pushButton_contrast.setText(_translate("MainWindow", "Применить"))
        self.horizontalSlider_contrast.setStatusTip(_translate("MainWindow", "Ползунок для выбора коэффициента контраста"))
        self.label_contrast.setText(_translate("MainWindow", "Выбор коэффициента контраста (от 0.1 до 5.0):"))
        self.label_2_contrast.setText(_translate("MainWindow", "Выбранный коэффициент:"))
        self.groupBox_gamma.setTitle(_translate("MainWindow", "Гамма-коррекция"))
        self.pushButton_gamma.setStatusTip(_translate("MainWindow", "Применить гамма-коррекцию"))
        self.pushButton_gamma.setText(_translate("MainWindow", "Применить"))
        self.horizontalSlider_gamma.setStatusTip(_translate("MainWindow", "Ползунок для выбора коэффициента гамма-коррекции"))
        self.label_gamma.setText(_translate("MainWindow", "Выбор коэффициента гамма-коррекции (от 0.1 до 5.0):"))
        self.label_2_gamma.setText(_translate("MainWindow", "Выбранный коэффициент:"))
        self.groupBox_full.setTitle(_translate("MainWindow", "Использование всего диапазона"))
        self.pushButton_full.setStatusTip(_translate("MainWindow", "Применить градационное преобразование для использования всего диапазона значений"))
        self.pushButton_full.setText(_translate("MainWindow", "Применить"))
        self.label.setText(_translate("MainWindow", "Загруженное изображение:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.gf), _translate("MainWindow", "Градационные преобразования"))
        self.pushButton_matrix.setStatusTip(_translate("MainWindow", "Построить матрицу изображений с заранее заданными r и epsilon"))
        self.pushButton_matrix.setText(_translate("MainWindow", "Построить"))
        self.pushButton_gif.setStatusTip(_translate("MainWindow", "Построить отфильтрованное изображение с заддаными пользователем r и epsilon"))
        self.pushButton_gif.setText(_translate("MainWindow", "Построить"))
        self.lineEdit_epsilon.setStatusTip(_translate("MainWindow", "Коэффициент epsilon"))
        self.lineEdit_r.setStatusTip(_translate("MainWindow", "Радиус окна фильтра"))
        self.label_2.setText(_translate("MainWindow", "r:"))
        self.label_3.setText(_translate("MainWindow", "Epsilon:"))
        self.label_4.setText(_translate("MainWindow", "Для построения матрицы изображений:"))
        self.label_5.setText(_translate("MainWindow", "Для построения отфильтрованного изображения:"))
        self.checkBox.setStatusTip(_translate("MainWindow", "Добавить гауссов шум к загруженному изображению"))
        self.checkBox.setText(_translate("MainWindow", "Шум"))
        self.label_6.setText(_translate("MainWindow", "СКО шума:"))
        self.label_7.setText(_translate("MainWindow", "Загруженное изображение:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.gif), _translate("MainWindow", "Guided Image Filter"))
        self.groupBox_brightness_video.setTitle(_translate("MainWindow", "Изменение яркости"))
        self.pushButton_brightness_video.setStatusTip(_translate("MainWindow", "Применить изменение яркости"))
        self.pushButton_brightness_video.setText(_translate("MainWindow", "Применить"))
        self.horizontalSlider_brightness_video.setStatusTip(_translate("MainWindow", "Ползунок для выбора коэффициента яркости"))
        self.label_brightness_video.setText(_translate("MainWindow", "Выбор коэффициента яркости (от -150 до 150):"))
        self.label_2_brightness_video.setText(_translate("MainWindow", "Выбранный коэффициент:"))
        self.groupBox_contrast_video.setTitle(_translate("MainWindow", "Изменение контраста"))
        self.pushButton_contrast_video.setStatusTip(_translate("MainWindow", "Применить изменение контраста"))
        self.pushButton_contrast_video.setText(_translate("MainWindow", "Применить"))
        self.horizontalSlider_contrast_video.setStatusTip(_translate("MainWindow", "Ползунок для выбора коэффициента контраста"))
        self.label_contrast_video.setText(_translate("MainWindow", "Выбор коэффициента контраста (от 0.1 до 5.0):"))
        self.label_2_contrast_video.setText(_translate("MainWindow", "Выбранный коэффициент:"))
        self.groupBox_negative_video.setTitle(_translate("MainWindow", "Негатив"))
        self.button_negative_video.setStatusTip(_translate("MainWindow", "Преобразовать видео в негатив"))
        self.button_negative_video.setText(_translate("MainWindow", "Негатив"))
        self.groupBox_gamma_video.setTitle(_translate("MainWindow", "Гамма-коррекция"))
        self.pushButton_gamma_video.setStatusTip(_translate("MainWindow", "Применить гамма-коррекцию"))
        self.pushButton_gamma_video.setText(_translate("MainWindow", "Применить"))
        self.horizontalSlider_gamma_video.setStatusTip(_translate("MainWindow", "Ползунок для выбора коэффициента гамма-коррекции"))
        self.label_gamma_video.setText(_translate("MainWindow", "Выбор коэффициента гамма-коррекции (от 0.1 до 5.0):"))
        self.label_2_gamma_video.setText(_translate("MainWindow", "Выбранный коэффициент:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.cam), _translate("MainWindow", "Веб-камера"))
        self.menuFile.setTitle(_translate("MainWindow", "Файл"))
        self.menu.setTitle(_translate("MainWindow", "Правка"))
        self.menu_2.setTitle(_translate("MainWindow", "Справка"))

        self.actionOpen_image.setText(_translate("MainWindow", "Открыть изображение"))
        self.actionOpen_image.setStatusTip(_translate("MainWindow", "Открыть изображение для последующей обработки"))
        self.actionOpen_image.setShortcut(_translate("MainWindow", "Ctrl+O"))

        self.action_Exit.setText(_translate("MainWindow", "Выход"))
        self.action_Exit.setStatusTip(_translate("MainWindow", "Выход из приложения"))
        self.action_Exit.setShortcut(_translate("MainWindow", "Ctrl+Q"))

        self.actionSave_image.setText(_translate("MainWindow", "Сохранить изображение"))
        self.actionSave_image.setStatusTip(_translate("MainWindow", "Сохранить измененное изображение"))
        self.actionSave_image.setShortcut(_translate("MainWindow", "Ctrl+S"))

        self.action_Reset.setText(_translate("MainWindow", "Сброс"))

        self.action_program.setText(_translate("MainWindow", "О программе"))
        self.action_help.setText(_translate("MainWindow", "Помощь"))

class MainWindow(QMainWindow):
    def __init__(self):
            super().__init__()
            self.ui = Ui_MainWindow()
            self.ui.setupUi(self)
            self.file_path = None
            self.current_brightness = 0
            self.current_binarization = 0
            self.current_contrast = 0.1
            self.current_gamma = 0.1
            self.current_brightness_video = 0
            self.current_contrast_video = 0.1
            self.current_gamma_video = 0.1
            self.processed_image = None

            self.ui.horizontalSlider_brightness.setDisabled(True)
            self.ui.lineEdit_brightness.setDisabled(True)
            self.ui.horizontalSlider_binarization.setDisabled(True)
            self.ui.lineEdit_binarization.setDisabled(True)
            self.ui.horizontalSlider_contrast.setDisabled(True)
            self.ui.lineEdit_contrast.setDisabled(True)
            self.ui.horizontalSlider_gamma.setDisabled(True)
            self.ui.lineEdit_gamma.setDisabled(True)
            self.ui.lineEdit_r.setDisabled(True)
            self.ui.lineEdit_epsilon.setDisabled(True)
            self.ui.lineEdit_noise.setDisabled(True)
            self.ui.checkBox.setDisabled(True)

            # Подключение действия: открытие изображения
            self.ui.actionOpen_image.triggered.connect(self.open_image)
            self.ui.actionSave_image.triggered.connect(self.save_image)
            self.ui.action_Exit.triggered.connect(self.exit)

            self.ui.button_negative.clicked.connect(self.negative)
            self.ui.button_equalization.clicked.connect(self.equalization)
            self.ui.pushButton_full.clicked.connect(self.full)
            self.ui.pushButton_brightness.clicked.connect(self.brightness)
            self.ui.pushButton_binarization.clicked.connect(self.binarization)
            self.ui.pushButton_contrast.clicked.connect(self.contrast)
            self.ui.pushButton_gamma.clicked.connect(self.gamma)
            self.ui.pushButton_brightness_video.clicked.connect(self.brightness_video)
            self.ui.button_negative_video.clicked.connect(self.negative_video)
            self.ui.pushButton_contrast_video.clicked.connect(self.contrast_video)
            self.ui.pushButton_gamma_video.clicked.connect(self.gamma_video)

            self.ui.horizontalSlider_brightness.valueChanged.connect(self.update_brightness_line_edit)
            self.ui.lineEdit_brightness.editingFinished.connect(self.update_brightness_slider)

            self.ui.horizontalSlider_binarization.valueChanged.connect(self.update_binarization_line_edit)
            self.ui.lineEdit_binarization.editingFinished.connect(self.update_binarization_slider)

            self.ui.horizontalSlider_contrast.valueChanged.connect(self.update_contrast_line_edit)
            self.ui.lineEdit_contrast.editingFinished.connect(self.update_contrast_slider)

            self.ui.horizontalSlider_gamma.valueChanged.connect(self.update_gamma_line_edit)
            self.ui.lineEdit_gamma.editingFinished.connect(self.update_gamma_slider)

            self.ui.horizontalSlider_brightness_video.valueChanged.connect(self.update_brightness_video_line_edit)
            self.ui.lineEdit_brightness_video.editingFinished.connect(self.update_brightness_video_slider)

            self.ui.horizontalSlider_contrast_video.valueChanged.connect(self.update_contrast_video_line_edit)
            self.ui.lineEdit_contrast_video.editingFinished.connect(self.update_contrast_video_slider)

            self.ui.horizontalSlider_gamma_video.valueChanged.connect(self.update_gamma_video_line_edit)
            self.ui.lineEdit_gamma_video.editingFinished.connect(self.update_gamma_video_slider)


    def open_image(self):
        # Открыть диалог выбора файла
        file_path, _ = QFileDialog.getOpenFileName(
                self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP", "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
        )

        if file_path:
            # Загрузить изображение
            self.file_path = file_path
            self.load_image(file_path)

            # Разблокируем слайдер и поле ввода
            self.ui.horizontalSlider_brightness.setEnabled(True)
            self.ui.lineEdit_brightness.setEnabled(True)
            self.ui.horizontalSlider_binarization.setEnabled(True)
            self.ui.lineEdit_binarization.setEnabled(True)
            self.ui.horizontalSlider_contrast.setEnabled(True)
            self.ui.lineEdit_contrast.setEnabled(True)
            self.ui.horizontalSlider_gamma.setEnabled(True)
            self.ui.lineEdit_gamma.setEnabled(True)

    def load_image(self, file_path):
            # Загрузить изображение в QPixmap
            pixmap = QPixmap(file_path)

            if pixmap.isNull():
                    print("Ошибка при загрузке изображения")
                    return

            # Очистить сцену
            self.ui.scene.clear()

            # Преобразовать изображение в градации серого
            grayscale_pixmap = self.convert_to_grayscale(pixmap)

            # Добавить изображение
            self.ui.scene.addPixmap(grayscale_pixmap)

            # Установить границы сцены
            self.ui.scene.setSceneRect(self.ui.scene.itemsBoundingRect())
            rect = self.ui.scene.sceneRect()

            if rect.isNull() or rect.width() <= 0 or rect.height() <= 0:
                    print("Ошибка: Некорректный sceneRect")
                    return

            # Масштабировать изображение с сохранением пропорций
            self.ui.graphicsView.fitInView(rect, Qt.AspectRatioMode.KeepAspectRatio)
            self.ui.graphicsView_2.fitInView(rect, Qt.AspectRatioMode.KeepAspectRatio)

    def convert_to_grayscale(self, pixmap):
            '''Для преобразования pixmap в grayscale'''
            # Получить изображение в формате QImage из QPixmap
            image = pixmap.toImage()

            # Преобразовать изображение в оттенки серого
            grayscale_image = image.convertToFormat(QImage.Format.Format_Grayscale8)

            # Преобразовать обратно в QPixmap
            grayscale_pixmap = QPixmap.fromImage(grayscale_image)

            return grayscale_pixmap

    def negative(self):
        '''Преобразование изображения в негатив'''
        if self.file_path is None:
                msg = QMessageBox(self)
                msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                msg.setWindowTitle("Предупреждение")  # Заголовок окна
                msg.setText("Не было выбрано изображение!")  # Основной текст
                msg.setStandardButtons(QMessageBox.StandardButton.Ok|QMessageBox.StandardButton.Open)  # Кнопки
                msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                # Ожидание выбора кнопки и обработка результата
                result = msg.exec()

                if result == QMessageBox.StandardButton.Open:
                        # Открыть диалог выбора файла
                        file_path, _ = QFileDialog.getOpenFileName(
                                self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                        )

                        if file_path:
                                # Загрузить изображение
                                self.file_path = file_path
                                self.load_image(file_path)

                                # Разблокируем слайдер и поле ввода
                                self.ui.horizontalSlider_brightness.setEnabled(True)
                                self.ui.lineEdit_brightness.setEnabled(True)
                                self.ui.horizontalSlider_binarization.setEnabled(True)
                                self.ui.lineEdit_binarization.setEnabled(True)
                                self.ui.horizontalSlider_contrast.setEnabled(True)
                                self.ui.lineEdit_contrast.setEnabled(True)
                                self.ui.horizontalSlider_gamma.setEnabled(True)
                                self.ui.lineEdit_gamma.setEnabled(True)
                                self.ui.lineEdit_r.setEnabled(True)
                                self.ui.lineEdit_epsilon.setEnabled(True)
                                self.ui.lineEdit_noise.setEnabled(True)
                                self.ui.checkBox.setEnabled(True)
        else:
                image = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)

                image_1 = 255 - image

                self.processed_image = image_1

                orig_hist = self.calculate_histogram(image)
                changed_hist = self.calculate_histogram(image_1)

                self.show_histograms_and_images(image, image_1, orig_hist, changed_hist)

    def equalization(self):
            if self.file_path is None:
                    msg = QMessageBox(self)
                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                    msg.setText("Не было выбрано изображение!")  # Основной текст
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Open)  # Кнопки
                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                    # Ожидание выбора кнопки и обработка результата
                    result = msg.exec()

                    if result == QMessageBox.StandardButton.Open:
                            # Открыть диалог выбора файла
                            file_path, _ = QFileDialog.getOpenFileName(
                                    self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                    "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                            )

                            if file_path:
                                    # Загрузить изображение
                                    self.file_path = file_path
                                    self.load_image(file_path)

                                    # Разблокируем слайдер и поле ввода
                                    self.ui.horizontalSlider_brightness.setEnabled(True)
                                    self.ui.lineEdit_brightness.setEnabled(True)
                                    self.ui.horizontalSlider_binarization.setEnabled(True)
                                    self.ui.lineEdit_binarization.setEnabled(True)
                                    self.ui.horizontalSlider_contrast.setEnabled(True)
                                    self.ui.lineEdit_contrast.setEnabled(True)
                                    self.ui.horizontalSlider_gamma.setEnabled(True)
                                    self.ui.lineEdit_gamma.setEnabled(True)
                                    self.ui.lineEdit_r.setEnabled(True)
                                    self.ui.lineEdit_epsilon.setEnabled(True)
                                    self.ui.lineEdit_noise.setEnabled(True)
                                    self.ui.checkBox.setEnabled(True)

            else:
                    image = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)
                    lst = np.zeros(256)
                    for y in range(image.shape[0]):
                            for x in range(image.shape[1]):
                                    intensity = image[y, x]
                                    lst[intensity] += 1

                    for i in range(len(lst)):
                            lst[i] += lst[i - 1]

                    cdf_m = np.ma.masked_equal(lst, 0)
                    cdf_m = (cdf_m - cdf_m.min()) / (cdf_m.max() - cdf_m.min()) * 255
                    cdf = np.ma.filled(cdf_m, 0).astype('uint8')
                    equalized_image = cdf[image]

                    self.processed_image = equalized_image

                    orig_hist = self.calculate_histogram(image)
                    equalized_hist = self.calculate_histogram(equalized_image)

                    self.show_histograms_and_images(image, equalized_image, orig_hist, equalized_hist)

    def full(self):
        if self.file_path is None:
                msg = QMessageBox(self)
                msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                msg.setWindowTitle("Предупреждение")  # Заголовок окна
                msg.setText("Не было выбрано изображение!")  # Основной текст
                msg.setStandardButtons(QMessageBox.StandardButton.Ok|QMessageBox.StandardButton.Open)  # Кнопки
                msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                # Ожидание выбора кнопки и обработка результата
                result = msg.exec()

                if result == QMessageBox.StandardButton.Open:
                        # Открыть диалог выбора файла
                        file_path, _ = QFileDialog.getOpenFileName(
                                self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                        )

                        if file_path:
                                # Загрузить изображение
                                self.file_path = file_path
                                self.load_image(file_path)

                                # Разблокируем слайдер и поле ввода
                                self.ui.horizontalSlider_brightness.setEnabled(True)
                                self.ui.lineEdit_brightness.setEnabled(True)
                                self.ui.horizontalSlider_binarization.setEnabled(True)
                                self.ui.lineEdit_binarization.setEnabled(True)
                                self.ui.horizontalSlider_contrast.setEnabled(True)
                                self.ui.lineEdit_contrast.setEnabled(True)
                                self.ui.horizontalSlider_gamma.setEnabled(True)
                                self.ui.lineEdit_gamma.setEnabled(True)
                                self.ui.lineEdit_r.setEnabled(True)
                                self.ui.lineEdit_epsilon.setEnabled(True)
                                self.ui.lineEdit_noise.setEnabled(True)
                                self.ui.checkBox.setEnabled(True)
        else:
                img = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)

                # Приведение к полному диапазону [0, 255] с использованием NumPy
                img_min = np.min(img)
                img_max = np.max(img)
                img_1 = 255 * ((img - img_min) / (img_max - img_min))
                img_1 = img_1.astype(np.uint8)

                self.processed_image = img_1

                orig_hist = self.calculate_histogram(img)
                changed_hist = self.calculate_histogram(img_1)

                self.show_histograms_and_images(img, img_1, orig_hist, changed_hist)

    def calculate_histogram(self, img):
            # histogram = [0] * 256                # действие вложенного цикла аналогично тому, что делает функция np.bincount
            # for y in range(img.shape[0]):
            #     for x in range(img.shape[1]):
            #         intensity = img[y, x]
            #         histogram[intensity] += 1

            # Подсчет количества пикселей каждого значения интенсивности
            histogram = np.bincount(img.ravel(), minlength=256)
            # Нормализация гистограммы
            normalized_hist = histogram / img.size
            return normalized_hist

    def show_histograms_and_images(self, orig_img, changed_img, orig_hist, changed_hist):
            fig, axes = plt.subplots(2, 2, figsize=(10, 8))  # Увеличиваем размер графиков

            axes[0, 0].imshow(orig_img, cmap='gray')
            axes[0, 0].set_title('Original Image', fontsize=14)
            axes[0, 0].axis('off')  # Убираем оси

            axes[0, 1].imshow(changed_img, cmap='gray')
            axes[0, 1].set_title('Changed Image', fontsize=14)
            axes[0, 1].axis('off')  # Убираем оси

            # Гистограмма для оригинального изображения
            axes[1, 0].bar(range(256), orig_hist, color='yellow', width=1.0, edgecolor="black")
            axes[1, 0].set_title('Histogram of Original Image', fontsize=14)
            axes[1, 0].set_xlabel('Pixel Intensity', fontsize=12)
            axes[1, 0].set_ylabel('Frequency', fontsize=12)
            axes[1, 0].grid(True, linestyle='--', alpha=0.6)  # Добавляем сетку

            # Гистограмма для измененного изображения
            axes[1, 1].bar(range(256), changed_hist, color='red', width=1.0, edgecolor="black")
            axes[1, 1].set_title('Histogram of Changed Image', fontsize=14)
            axes[1, 1].set_xlabel('Pixel Intensity', fontsize=12)
            axes[1, 1].set_ylabel('Frequency', fontsize=12)
            axes[1, 1].grid(True, linestyle='--', alpha=0.6)  # Добавляем сетку

            # Выравниваем графики
            plt.tight_layout()
            plt.show()

    def update_brightness_line_edit(self, value):
        """Обновляет значение LineEdit и переменную при изменении слайдера"""
        # Обновляем текст в QLineEdit
        self.ui.lineEdit_brightness.setText(str(value))
        # Обновляем переменную
        self.current_brightness = value

    def update_brightness_slider(self):
        """Обновляет значение слайдера и переменную при изменении LineEdit"""
        try:
            # Считываем значение из LineEdit
            value = int(self.ui.lineEdit_brightness.text())
            if -150 <= value <= 150:  # Проверяем, что значение в допустимом диапазоне
                self.ui.horizontalSlider_brightness.setValue(value)
                self.current_brightness = value  # Сохраняем значение в переменную
            else:
                # Создание окна QMessageBox
                msg = QMessageBox(self)
                msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                msg.setWindowTitle("Предупреждение")  # Заголовок окна
                msg.setText("Введено некорректное значение!        ")  # Основной текст
                msg.setInformativeText("Введите целое число от -150 до 150.")  # Подтекст
                msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопки
                msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                msg.show() # Показать окно и получить результат

                # Если значение вне диапазона, вернуть предыдущее значениe
                self.ui.lineEdit_brightness.setText(f"{self.current_brightness}")
                self.ui.horizontalSlider_brightness.setValue(self.current_brightness)
        except ValueError:
            # Если введено некорректное значение, вернуть предыдущее значение
            self.ui.lineEdit_brightness.setText(f"{self.current_brightness}")
            # И можно вернуть слайдер в предыдущее состояние
            self.ui.horizontalSlider_brightness.setValue(self.current_brightness)


    def brightness(self):
            if self.file_path is None:
                    msg = QMessageBox(self)
                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                    msg.setText("Не было выбрано изображение!")  # Основной текст
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Open)  # Кнопки
                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                    # Ожидание выбора кнопки и обработка результата
                    result = msg.exec()

                    if result == QMessageBox.StandardButton.Open:
                            # Открыть диалог выбора файла
                            file_path, _ = QFileDialog.getOpenFileName(
                                    self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                    "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                            )

                            if file_path:
                                    # Загрузить изображение
                                    self.file_path = file_path
                                    self.load_image(file_path)

                                    # Разблокируем слайдер и поле ввода
                                    self.ui.horizontalSlider_brightness.setEnabled(True)
                                    self.ui.lineEdit_brightness.setEnabled(True)
                                    self.ui.horizontalSlider_binarization.setEnabled(True)
                                    self.ui.lineEdit_binarization.setEnabled(True)
                                    self.ui.horizontalSlider_contrast.setEnabled(True)
                                    self.ui.lineEdit_contrast.setEnabled(True)
                                    self.ui.horizontalSlider_gamma.setEnabled(True)
                                    self.ui.lineEdit_gamma.setEnabled(True)
                                    self.ui.lineEdit_r.setEnabled(True)
                                    self.ui.lineEdit_epsilon.setEnabled(True)
                                    self.ui.lineEdit_noise.setEnabled(True)
                                    self.ui.checkBox.setEnabled(True)
            else:
                    # Считываем изображение в градациях серого
                    img = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)

                    img_1 = np.zeros((img.shape[0], img.shape[1]), dtype=np.float32)
                    for y in range(img_1.shape[0]):
                            for x in range(img_1.shape[1]):
                                    img_1[y, x] = img[y, x] + self.current_brightness
                                    if self.current_brightness < 0:
                                            if img_1[y, x] < 0:
                                                    img_1[y, x] = 0
                                    elif self.current_brightness > 0:
                                            if img_1[y, x] > 255:
                                                    img_1[y, x] = 255

                    img_1 = img_1.astype(np.uint8)

                    self.processed_image = img_1

                    orig_hist = self.calculate_histogram(img)
                    changed_hist = self.calculate_histogram(img_1)

                    self.show_histograms_and_images(img, img_1, orig_hist, changed_hist)

    def update_binarization_line_edit(self, value):
        # Обновляем текст в QLineEdit
        self.ui.lineEdit_binarization.setText(str(value))
        # Обновляем переменную
        self.current_binarization = value

    def update_binarization_slider(self):
            """Обновляет значение слайдера и переменную при изменении LineEdit"""
            try:
                    # Считываем значение из LineEdit
                    value = int(self.ui.lineEdit_binarization.text())
                    if 0 <= value <= 255:  # Проверяем, что значение в допустимом диапазоне
                            self.ui.horizontalSlider_binarization.setValue(value)
                            self.current_binarization = value  # Сохраняем значение в переменную
                    else:
                            # Создание окна QMessageBox
                            msg = QMessageBox(self)
                            msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                            msg.setWindowTitle("Предупреждение")  # Заголовок окна
                            msg.setText("Введено некорректное значение!        ")  # Основной текст
                            msg.setInformativeText("Введите целое число от 0 до 255.")  # Подтекст
                            msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопки
                            msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                            msg.show()  # Показать окно и получить результат

                            # Если значение вне диапазона, вернуть предыдущее значениe
                            self.ui.lineEdit_binarization.setText(f"{self.current_binarization}")
                            self.ui.horizontalSlider_binarization.setValue(self.current_binarization)
            except ValueError:
                    # Если введено некорректное значение, вернуть предыдущее значение
                    self.ui.lineEdit_binarization.setText(f"{self.current_binarization}")
                    # И можно вернуть слайдер в предыдущее состояние
                    self.ui.horizontalSlider_binarization.setValue(self.current_binarization)


    def binarization(self):
            if self.file_path is None:
                    msg = QMessageBox(self)
                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                    msg.setText("Не было выбрано изображение!")  # Основной текст
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Open)  # Кнопки
                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                    # Ожидание выбора кнопки и обработка результата
                    result = msg.exec()

                    if result == QMessageBox.StandardButton.Open:
                            # Открыть диалог выбора файла
                            file_path, _ = QFileDialog.getOpenFileName(
                                    self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                    "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                            )

                            if file_path:
                                    # Загрузить изображение
                                    self.file_path = file_path
                                    self.load_image(file_path)

                                    # Разблокируем слайдер и поле ввода
                                    self.ui.horizontalSlider_brightness.setEnabled(True)
                                    self.ui.lineEdit_brightness.setEnabled(True)
                                    self.ui.horizontalSlider_binarization.setEnabled(True)
                                    self.ui.lineEdit_binarization.setEnabled(True)
                                    self.ui.horizontalSlider_contrast.setEnabled(True)
                                    self.ui.lineEdit_contrast.setEnabled(True)
                                    self.ui.horizontalSlider_gamma.setEnabled(True)
                                    self.ui.lineEdit_gamma.setEnabled(True)
                                    self.ui.lineEdit_r.setEnabled(True)
                                    self.ui.lineEdit_epsilon.setEnabled(True)
                                    self.ui.lineEdit_noise.setEnabled(True)
                                    self.ui.checkBox.setEnabled(True)
            else:
                    img = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)

                    img_1 = img.copy()
                    for y in range(img_1.shape[0]):
                            for x in range(img_1.shape[1]):
                                    if img[y, x] >= self.current_binarization:
                                            img_1[y, x] = 255
                                    else:
                                            img_1[y, x] = 0

                    self.processed_image = img_1

                    orig_hist = self.calculate_histogram(img)
                    changed_hist = self.calculate_histogram(img_1)

                    self.show_histograms_and_images(img, img_1, orig_hist, changed_hist)

    def update_contrast_line_edit(self, value):
            # Обновляем текст в QLineEdit
            self.ui.lineEdit_contrast.setText(f"{value / 10:.1f}")  # Выводим с 1 знаков после запятой
            # Обновляем переменную
            self.current_contrast = value / 10  # Сохраняем значение с плавающей точкой

    def update_contrast_slider(self):
            """Обновляет значение слайдера и переменную при изменении LineEdit"""
            try:
                    # Считываем значение из LineEdit
                    value = float(self.ui.lineEdit_contrast.text())
                    # Проверяем, что значение в допустимом диапазоне (от 0.1 до 2.0 с шагом 0.1)
                    if 0.1 <= value <= 5.0:
                            if re.match(r'^\d+(\.\d{1})?$', str(value)):
                                    # Масштабируем значение в диапазон слайдера (от 1 до 20)
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_contrast.setValue(slider_value)
                                    self.current_contrast = value  # Сохраняем значение с плавающей точкой
                            else:
                                    # Создание окна предупреждения
                                    msg = QMessageBox(self)
                                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                                    msg.setText("Введено некорректное значение!         ")  # Основной текст
                                    msg.setInformativeText("Число имеет больше одного знака после запятой.")  # Подтекст
                                    msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                                    msg.show()  # Показать окно предупреждения

                                    # Если значение вне диапазона, возвращаем предыдущее значение
                                    self.ui.lineEdit_contrast.setText(f"{self.current_contrast:.1f}")
                                    # Переводим в значение слайдера, соответствующее предыдущему значению
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_contrast.setValue(slider_value)
                    else:
                            # Создание окна предупреждения
                            msg = QMessageBox(self)
                            msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                            msg.setWindowTitle("Предупреждение")  # Заголовок окна
                            msg.setText("Введено некорректное значение!         ")  # Основной текст
                            msg.setInformativeText("Введите число от 0.1 до 5.0 с шагом 0.1.")  # Подтекст
                            msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                            msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                            msg.show()  # Показать окно предупреждения

                            # Если значение вне диапазона, возвращаем предыдущее значение
                            self.ui.lineEdit_contrast.setText(f"{self.current_contrast:.1f}")
                            # Переводим в значение слайдера, соответствующее предыдущему значению
                            slider_value = int(value * 10)
                            self.ui.horizontalSlider_contrast.setValue(slider_value)
            except ValueError:
                    # Если введено некорректное значение, возвращаем предыдущее значение
                    self.ui.lineEdit_contrast.setText(f"{self.current_contrast:.1f}")
                    # Переводим в значение слайдера, соответствующее предыдущему значению
                    slider_value = int(value * 10)
                    self.ui.horizontalSlider_contrast.setValue(slider_value)

    def contrast(self):
            if self.file_path is None:
                    msg = QMessageBox(self)
                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                    msg.setText("Не было выбрано изображение!")  # Основной текст
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Open)  # Кнопки
                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                    # Ожидание выбора кнопки и обработка результата
                    result = msg.exec()

                    if result == QMessageBox.StandardButton.Open:
                            # Открыть диалог выбора файла
                            file_path, _ = QFileDialog.getOpenFileName(
                                    self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                    "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                            )

                            if file_path:
                                    # Загрузить изображение
                                    self.file_path = file_path
                                    self.load_image(file_path)

                                    # Разблокируем слайдер и поле ввода
                                    self.ui.horizontalSlider_brightness.setEnabled(True)
                                    self.ui.lineEdit_brightness.setEnabled(True)
                                    self.ui.horizontalSlider_binarization.setEnabled(True)
                                    self.ui.lineEdit_binarization.setEnabled(True)
                                    self.ui.horizontalSlider_contrast.setEnabled(True)
                                    self.ui.lineEdit_contrast.setEnabled(True)
                                    self.ui.horizontalSlider_gamma.setEnabled(True)
                                    self.ui.lineEdit_gamma.setEnabled(True)
                                    self.ui.lineEdit_r.setEnabled(True)
                                    self.ui.lineEdit_epsilon.setEnabled(True)
                                    self.ui.lineEdit_noise.setEnabled(True)
                                    self.ui.checkBox.setEnabled(True)
            else:
                    img = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)

                    img_1 = np.zeros((img.shape[0], img.shape[1]), dtype=np.float32)
                    for y in range(img.shape[0]):
                            for x in range(img.shape[1]):
                                    img_1[y, x] = np.clip(self.current_contrast * img[y, x], 0, 255)

                    img_1 = img_1.astype(np.uint8)

                    self.processed_image = img_1

                    orig_hist = self.calculate_histogram(img)
                    changed_hist = self.calculate_histogram(img_1)

                    self.show_histograms_and_images(img, img_1, orig_hist, changed_hist)

    def update_gamma_line_edit(self, value):
            # Обновляем текст в QLineEdit
            self.ui.lineEdit_gamma.setText(f"{value / 10:.1f}")  # Выводим с 1 знаков после запятой
            # Обновляем переменную
            self.current_gamma = value / 10  # Сохраняем значение с плавающей точкой

    def update_gamma_slider(self):
            """Обновляет значение слайдера и переменную при изменении LineEdit"""
            try:
                    # Считываем значение из LineEdit
                    value = float(self.ui.lineEdit_gamma.text())
                    # Проверяем, что значение в допустимом диапазоне (от 0.1 до 2.0 с шагом 0.1)
                    if 0.1 <= value <= 5.0:
                            if re.match(r'^\d+(\.\d{1})?$', str(value)):
                                    # Масштабируем значение в диапазон слайдера (от 1 до 20)
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_gamma.setValue(slider_value)
                                    self.current_gamma = value  # Сохраняем значение с плавающей точкой
                            else:
                                    # Создание окна предупреждения
                                    msg = QMessageBox(self)
                                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                                    msg.setText("Введено некорректное значение!                 ")  # Основной текст
                                    msg.setInformativeText("Число имеет больше одного знака после запятой.")  # Подтекст
                                    msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                                    msg.show()  # Показать окно предупреждения

                                    # Если значение вне диапазона, возвращаем предыдущее значение
                                    self.ui.lineEdit_gamma.setText(f"{self.current_gamma:.1f}")
                                    # Переводим в значение слайдера, соответствующее предыдущему значению
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_gamma.setValue(slider_value)
                    else:
                            # Создание окна предупреждения
                            msg = QMessageBox(self)
                            msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                            msg.setWindowTitle("Предупреждение")  # Заголовок окна
                            msg.setText("Введено некорректное значение!         ")  # Основной текст
                            msg.setInformativeText("Введите число от 0.1 до 5.0 с шагом 0.1.")  # Подтекст
                            msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                            msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                            msg.show()  # Показать окно предупреждения

                            # Если значение вне диапазона, возвращаем предыдущее значение
                            self.ui.lineEdit_gamma.setText(f"{self.current_gamma:.1f}")
                            # Переводим в значение слайдера, соответствующее предыдущему значению
                            slider_value = int(value * 10)
                            self.ui.horizontalSlider_gamma.setValue(slider_value)
            except ValueError:
                    # Если введено некорректное значение, возвращаем предыдущее значение
                    self.ui.lineEdit_gamma.setText(f"{self.current_gamma:.1f}")
                    # Переводим в значение слайдера, соответствующее предыдущему значению
                    slider_value = int(value * 10)
                    self.ui.horizontalSlider_gamma.setValue(slider_value)

    def gamma(self):
            if self.file_path is None:
                    msg = QMessageBox(self)
                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                    msg.setText("Не было выбрано изображение!")  # Основной текст
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Open)  # Кнопки
                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию

                    # Ожидание выбора кнопки и обработка результата
                    result = msg.exec()

                    if result == QMessageBox.StandardButton.Open:
                            # Открыть диалог выбора файла
                            file_path, _ = QFileDialog.getOpenFileName(
                                    self, "Открыть изображение", r"D:\pythonProject\DIP\Images_DIP",
                                    "Image Files (*.png *.jpg *.bmp *.jpeg *.webp);;All Files (*)"
                            )

                            if file_path:
                                    # Загрузить изображение
                                    self.file_path = file_path
                                    self.load_image(file_path)

                                    # Разблокируем слайдер и поле ввода
                                    self.ui.horizontalSlider_brightness.setEnabled(True)
                                    self.ui.lineEdit_brightness.setEnabled(True)
                                    self.ui.horizontalSlider_binarization.setEnabled(True)
                                    self.ui.lineEdit_binarization.setEnabled(True)
                                    self.ui.horizontalSlider_contrast.setEnabled(True)
                                    self.ui.lineEdit_contrast.setEnabled(True)
                                    self.ui.horizontalSlider_gamma.setEnabled(True)
                                    self.ui.lineEdit_gamma.setEnabled(True)
                                    self.ui.lineEdit_r.setEnabled(True)
                                    self.ui.lineEdit_epsilon.setEnabled(True)
                                    self.ui.lineEdit_noise.setEnabled(True)
                                    self.ui.checkBox.setEnabled(True)
            else:
                    img = cv2.imread(self.file_path, cv2.IMREAD_GRAYSCALE)

                    img_1 = np.zeros((img.shape[0], img.shape[1]))
                    for y in range(img_1.shape[0]):
                            for x in range(img_1.shape[1]):
                                    img_1[y, x] = 255 * (img[y, x] / 255) ** self.current_gamma

                    img_1 = np.clip(img_1, 0, 255).astype(np.uint8)

                    self.processed_image = img_1

                    orig_hist = self.calculate_histogram(img)
                    changed_hist = self.calculate_histogram(img_1)

                    self.show_histograms_and_images(img, img_1, orig_hist, changed_hist)

    def save_image(self):
            if self.processed_image is not None:
                    # Показываем диалог сохранения файла
                    save_path, _ = QFileDialog.getSaveFileName(
                            self, "Сохранить изображение", "", "Image Files (*.png *.jpg *.bmp *.jpeg *.webp)"
                    )

                    if save_path:
                            # Сохраняем преобразованное изображение
                            cv2.imwrite(save_path, self.processed_image)
            else:
                    msg = QMessageBox(self)
                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                    msg.setText("Нет преобразованного изображения для сохранения!      ")  # Основной текст
                    msg.setInformativeText("Для возможности сохранения изображения сделайте хотя бы одно преобразование.")  # Подтекст
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                    msg.show()  # Показать окно предупреждения


    def update_brightness_video_line_edit(self, value):
        """Обновляет значение LineEdit и переменную при изменении слайдера"""
        # Обновляем текст в QLineEdit
        self.ui.lineEdit_brightness_video.setText(str(value))
        # Обновляем переменную
        self.current_brightness_video = value

    def update_brightness_video_slider(self):
        """Обновляет значение слайдера и переменную при изменении LineEdit"""
        try:
            # Считываем значение из LineEdit
            value = int(self.ui.lineEdit_brightness.text())
            if -150 <= value <= 150:  # Проверяем, что значение в допустимом диапазоне
                self.ui.horizontalSlider_brightness_video.setValue(value)
                self.current_brightness_video = value  # Сохраняем значение в переменную
            else:
                # Создание окна QMessageBox
                msg = QMessageBox(self)
                msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                msg.setWindowTitle("Предупреждение")  # Заголовок окна
                msg.setText("Введено некорректное значение!        ")  # Основной текст
                msg.setInformativeText("Введите целое число от -150 до 150.")  # Подтекст
                msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопки
                msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                msg.show() # Показать окно и получить результат

                # Если значение вне диапазона, вернуть предыдущее значениe
                self.ui.lineEdit_brightness_video.setText(f"{self.current_brightness_video}")
                self.ui.horizontalSlider_brightness_video.setValue(self.current_brightness_video)
        except ValueError:
            # Если введено некорректное значение, вернуть предыдущее значение
            self.ui.lineEdit_brightness_video.setText(f"{self.current_brightness_video}")
            # И можно вернуть слайдер в предыдущее состояние
            self.ui.horizontalSlider_brightness_video.setValue(self.current_brightness_video)

    def brightness_video(self):
            cap = cv2.VideoCapture(0)
            while True:
                    success, frame = cap.read()
                    frame_1 = frame.astype(np.int32)
                    frame_1 += self.current_brightness_video
                    frame_1 = np.clip(frame_1, 0, 255)
                    frame_1 = frame_1.astype(np.uint8)

                    cv2.imshow("Frame_1", frame_1)
                    cv2.imshow("Frame", frame)
                    key = cv2.waitKey(1)
                    if key == 27:
                            break

            cap.release()
            cv2.destroyAllWindows()

    def negative_video(self):
            cap = cv2.VideoCapture(0)
            while True:
                    success, frame = cap.read()
                    frame_1 = frame.astype(np.int32)
                    frame_1 = 255 - frame
                    frame_1 = frame_1.astype(np.uint8)

                    cv2.imshow("Frame_1", frame_1)
                    cv2.imshow("Frame", frame)
                    key = cv2.waitKey(1)
                    if key == 27:
                            break

            cap.release()
            cv2.destroyAllWindows()
    def update_contrast_video_line_edit(self, value):
            # Обновляем текст в QLineEdit
            self.ui.lineEdit_contrast_video.setText(f"{value / 10:.1f}")  # Выводим с 1 знаков после запятой
            # Обновляем переменную
            self.current_contrast_video = value / 10  # Сохраняем значение с плавающей точкой

    def update_contrast_video_slider(self):
            """Обновляет значение слайдера и переменную при изменении LineEdit"""
            try:
                    # Считываем значение из LineEdit
                    value = float(self.ui.lineEdit_contrast_video.text())
                    # Проверяем, что значение в допустимом диапазоне (от 0.1 до 2.0 с шагом 0.1)
                    if 0.1 <= value <= 5.0:
                            if re.match(r'^\d+(\.\d{1})?$', str(value)):
                                    # Масштабируем значение в диапазон слайдера (от 1 до 20)
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_contrast_video.setValue(slider_value)
                                    self.current_contrast_video = value  # Сохраняем значение с плавающей точкой
                            else:
                                    # Создание окна предупреждения
                                    msg = QMessageBox(self)
                                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                                    msg.setText("Введено некорректное значение!         ")  # Основной текст
                                    msg.setInformativeText("Число имеет больше одного знака после запятой.")  # Подтекст
                                    msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                                    msg.show()  # Показать окно предупреждения

                                    # Если значение вне диапазона, возвращаем предыдущее значение
                                    self.ui.lineEdit_contrast_video.setText(f"{self.current_contrast_video:.1f}")
                                    # Переводим в значение слайдера, соответствующее предыдущему значению
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_contrast_video.setValue(slider_value)
                    else:
                            # Создание окна предупреждения
                            msg = QMessageBox(self)
                            msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                            msg.setWindowTitle("Предупреждение")  # Заголовок окна
                            msg.setText("Введено некорректное значение!            ")  # Основной текст
                            msg.setInformativeText("Введите число от 0.1 до 5.0 с шагом 0.1.")  # Подтекст
                            msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                            msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                            msg.show()  # Показать окно предупреждения

                            # Если значение вне диапазона, возвращаем предыдущее значение
                            self.ui.lineEdit_contrast_video.setText(f"{self.current_contrast_video:.1f}")
                            # Переводим в значение слайдера, соответствующее предыдущему значению
                            slider_value = int(value * 10)
                            self.ui.horizontalSlider_contrast_video.setValue(slider_value)
            except ValueError:
                    # Если введено некорректное значение, возвращаем предыдущее значение
                    self.ui.lineEdit_contrast_video.setText(f"{self.current_contrast_video:.1f}")
                    # Переводим в значение слайдера, соответствующее предыдущему значению
                    slider_value = int(value * 10)
                    self.ui.horizontalSlider_contrast_video.setValue(slider_value)

    def contrast_video(self):
            cap = cv2.VideoCapture(0)

            while True:
                    success, frame = cap.read()
                    frame_1 = frame.astype(np.float32)
                    frame_1 *= self.current_contrast_video
                    frame_1 = np.clip(frame_1, 0, 255).astype(np.uint8)

                    cv2.imshow("Frame", frame)
                    cv2.imshow("Frame_1", frame_1)
                    key = cv2.waitKey(1)
                    if key == 27:
                            break
            cap.release()
            cv2.destroyAllWindows()

    def update_gamma_video_line_edit(self, value):
            # Обновляем текст в QLineEdit
            self.ui.lineEdit_gamma_video.setText(f"{value / 10:.1f}")  # Выводим с 1 знаков после запятой
            # Обновляем переменную
            self.current_gamma_video = value / 10  # Сохраняем значение с плавающей точкой

    def update_gamma_video_slider(self):
            """Обновляет значение слайдера и переменную при изменении LineEdit"""
            try:
                    # Считываем значение из LineEdit
                    value = float(self.ui.lineEdit_gamma_video.text())
                    # Проверяем, что значение в допустимом диапазоне (от 0.1 до 2.0 с шагом 0.1)
                    if 0.1 <= value <= 5.0:
                            if re.match(r'^\d+(\.\d{1})?$', str(value)):
                                    # Масштабируем значение в диапазон слайдера (от 1 до 20)
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_gamma_video.setValue(slider_value)
                                    self.current_gamma_video = value  # Сохраняем значение с плавающей точкой
                            else:
                                    # Создание окна предупреждения
                                    msg = QMessageBox(self)
                                    msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                                    msg.setWindowTitle("Предупреждение")  # Заголовок окна
                                    msg.setText("Введено некорректное значение!                 ")  # Основной текст
                                    msg.setInformativeText("Число имеет больше одного знака после запятой.")  # Подтекст
                                    msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                                    msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                                    msg.show()  # Показать окно предупреждения

                                    # Если значение вне диапазона, возвращаем предыдущее значение
                                    self.ui.lineEdit_gamma_video.setText(f"{self.current_gamma_video:.1f}")
                                    # Переводим в значение слайдера, соответствующее предыдущему значению
                                    slider_value = int(value * 10)
                                    self.ui.horizontalSlider_gamma_video.setValue(slider_value)
                    else:
                            # Создание окна предупреждения
                            msg = QMessageBox(self)
                            msg.setIcon(QMessageBox.Icon.Warning)  # Иконка предупреждения
                            msg.setWindowTitle("Предупреждение")  # Заголовок окна
                            msg.setText("Введено некорректное значение!         ")  # Основной текст
                            msg.setInformativeText("Введите число от 0.1 до 5.0 с шагом 0.1.")  # Подтекст
                            msg.setStandardButtons(QMessageBox.StandardButton.Ok)  # Кнопка
                            msg.setDefaultButton(QMessageBox.StandardButton.Ok)  # Кнопка по умолчанию
                            msg.show()  # Показать окно предупреждения

                            # Если значение вне диапазона, возвращаем предыдущее значение
                            self.ui.lineEdit_gamma_video.setText(f"{self.current_gamma_video:.1f}")
                            # Переводим в значение слайдера, соответствующее предыдущему значению
                            slider_value = int(value * 10)
                            self.ui.horizontalSlider_gamma_video.setValue(slider_value)
            except ValueError:
                    # Если введено некорректное значение, возвращаем предыдущее значение
                    self.ui.lineEdit_gamma_video.setText(f"{self.current_gamma_video:.1f}")
                    # Переводим в значение слайдера, соответствующее предыдущему значению
                    slider_value = int(value * 10)
                    self.ui.horizontalSlider_gamma_video.setValue(slider_value)

    def gamma_video(self):
            cap = cv2.VideoCapture(0)

            while True:
                    success, frame = cap.read()

                    frame_1 = np.clip(255 * (frame / 255) ** self.current_gamma_video, 0, 255).astype(np.uint8)

                    cv2.imshow("Frame", frame)
                    cv2.imshow("Frame_1", frame_1)
                    key = cv2.waitKey(1)
                    if key == 27:
                            break

            cap.release()
            cv2.destroyAllWindows()

    def exit(self):
            msg = QMessageBox(self)
            msg.setIcon(QMessageBox.Icon.Question)
            msg.setWindowTitle("Подтверждение")
            msg.setText("Вы действительно хотите закрыть приложение?")
            msg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            result = msg.exec()

            if result == QMessageBox.StandardButton.Yes:
                    QtWidgets.QApplication.quit()  # Закрыть приложение

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())